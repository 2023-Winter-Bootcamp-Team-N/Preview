version: "3"

services:
  db:
    image: postgres
    container_name: db_n
    volumes:
      - ./data/db:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - t4y

  backend:
    container_name: backend_n
    build: ./backend
    command: sh -c "python manage.py makemigrations account && \
      python manage.py makemigrations subscribe && \
      python manage.py makemigrations summary && \
      python manage.py migrate && python manage.py loaddata test.json && \
      python manage.py runserver 0.0.0.0:8000"
    ports:
      - 8000:8000
    volumes:
      - ./backend:/usr/src/app
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - t4y

  rabbit:
    container_name: rabbit_n
    image: rabbitmq:3-management
    hostname: rabbit
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=mypass
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - t4y

  celery:
    container_name: celery_n
    build: ./backend
    command: sh -c 'celery -A nTeamProject.celery worker --loglevel=info'
    depends_on:
      - rabbit
      - db
    networks:
      - t4y
    volumes:
      - ./backend:/usr/src/app
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL = 'amqp://admin:mypass@rabbit:5672'

  # nginx:
  #   image: nginx:1.15-alpine
  #   restart: unless-stopped
  #   volumes:
  #     # - ./data/nginx:/etc/nginx/conf.d
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   depends_on:
  #     - backend
  #   networks:
  #     - t4y
  #   command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  # certbot: #certbot
  #   image: certbot/certbot
  #   restart: unless-stopped
  #   container_name: certbot
  #   volumes:
  #     - ./certbot/conf:/etc/letsencrypt
  #     - ./certbot/www:/var/www/certbot
  #   depends_on:
  #     - nginx
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   volumes:
  #     - ./prometheus/config:/etc/prometheus
  #     - prometheus-data:/prometheus
  #   ports:
  #     - 9090:9090
  #   command:
  #     - "--storage.tsdb.path=/prometheus"
  #     - "--config.file=/etc/prometheus/prometheus.yml"
  #   restart: always
  #   networks:
  #     - t4y

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #     - ./grafana/provisioning/:/etc/grafana/provisioning/
  #   restart: always
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - t4y

  # node_exporter:
  #   image: prom/node-exporter
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - "--path.procfs=/host/proc"
  #     - "--path.rootfs=/rootfs"
  #     - "--path.sysfs=/host/sys"
  #     - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
  #     - "--collector.cpu"
  #     - "--collector.loadavg"
  #   ports:
  #     - "9100:9100"
  #   networks:
  #     - t4y

  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:v0.45.0

  #   container_name: cadvisor
  #   ports:
  #     - 8080:8080
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /dev/disk/:/dev/disk:ro
  #   depends_on:
  #     - backend
  #   networks:
  #     - t4y

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
  #   container_name: elasticsearch
  #   environment:
  #     - "discovery.type=single-node"
  #   ports:
  #     - "9200:9200"
  #   networks:
  #     - t4y

  # logstash:
  #   image: docker.elastic.co/logstash/logstash:7.10.2
  #   container_name: logstash
  #   volumes:
  #     - ./backend/logging/:/logging/
  #     - ./backend/logging/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
  #     - ./backend/logging/logstash/pipeline:/usr/share/logstash/pipeline
  #   ports:
  #     - "5044:5044"
  #   networks:
  #     - t4y
  #   depends_on:
  #     - elasticsearch

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.10.2
  #   container_name: kibana
  #   ports:
  #     - "5601:5601"
  #   networks:
  #     - t4y
  #   depends_on:
  #     - elasticsearch

  # filebeat:
  #   image: docker.elastic.co/beats/filebeat:7.10.2
  #   container_name: filebeat
  #   volumes:
  #     - ./backend/logging:/logging
  #     - ./backend/logging/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - ./nginx/log:/var/log/nginx # nginx 로그를 호스트와 컨테이너 간에 공유
  #   networks:
  #     - t4y
  #   depends_on:
  #     - logstash
  #     - elasticsearch
  #     - kibana
  #   command: filebeat -e -c /usr/share/filebeat/filebeat.yml

volumes:
  grafana-data:
  prometheus-data:

networks:
  t4y:
    driver: bridge
